"""
Django settings for app project.

Generated by 'django-admin startproject' using Django 2.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import warnings

import redis

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
FRONTEND_DIR = os.path.join(BASE_DIR, "..", "react-frontend")

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "ll(_n((i#1q@k!3#1@g)tebwh25*4nicwj7lm63aq181*7@b(j"

if os.environ.get("DJANGO_DEBUG"):
    # SECURITY WARNING: don't run with debug turned on in production!
    DEBUG = True
else:
    DEBUG = False
    ALLOWED_HOSTS = ["*"]

# Application definition

INSTALLED_APPS = [
    # Whitenoise
    "whitenoise.runserver_nostatic",
    # Django
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Django admin site
    "bootstrap_admin",
    "app.admin.AppAdminConfig",
    "django.contrib.admindocs",
    # 3rd-party libraries: Django REST Framework and Channels for API/Async
    # operations, Dramatiq for tasks
    "rest_framework",
    "channels",
    "django_dramatiq",
    # For representing tree structures
    "mptt",
    # -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.
    # App to manage the frontend-Channels integration
    "frontend",
    # For auto-notifying clients of changes
    "notify",
    # Custom authentication
    "app_auth",
    # Models
    "lexicon",
    "grammar",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "app.urls"

# Custom frontend templates are stored within the root `react` folder.
# Custom backend templates are stored within the `templates` folder.
TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            # Main frontend templates
            os.path.join(FRONTEND_DIR, "build"),
            # Admin templates and other overrides
            os.path.join(BASE_DIR, "templates"),
        ],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "app.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# Settings for default SQLite database
# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": os.path.join(BASE_DIR, "db.sqlite3")
#     }
# }
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "HOST": os.environ.get("DB_HOST") or "127.0.0.1",
        "PORT": os.environ.get("DB_PORT") or "6432",
        "NAME": os.environ.get("DB_NAME") or "cs_toolkit",
        "USER": os.environ.get("DB_USER") or "cs_toolkit",
        "PASSWORD": os.environ.get("DB_PASS") or "cs_toolkit",
        "CONN_MAX_AGE": None,
    }
}

# Psycopg2 displays an obtrusive warning as of version ^2.7
# cf.: https://github.com/dbcli/pgcli/pull/894
warnings.filterwarnings("ignore", category=UserWarning, module="psycopg2")

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation"
        ".UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {
        "NAME": "django.contrib.auth.password_validation"
        ".CommonPasswordValidator"
    },
    {
        "NAME": "django.contrib.auth.password_validation"
        ".NumericPasswordValidator"
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Custom authentication
AUTH_USER_MODEL = "app_auth.AppUser"

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Logging
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {"level": "DEBUG", "class": "logging.StreamHandler"}
    },
    "loggers": {
        # We might not want super-verbose logging on the server when
        # developing, so this can be set to a higher level than `INFO`
        "django.channels.server": {"level": "INFO"},
        "cs-toolkit": {"handlers": ["console"], "level": "INFO"},
        "cs-toolkit-grammar": {"level": "INFO"},
    },
}

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

# Frontend bundles and other static files are saved/built into the
# `FRONTEND_DIR/build/static` folder, and are collected from there for
# deployment.
# In addition, files can be served directly from there if `DEBUG` or
# `WHITENOISE_USE_FINDERS` is True, but this is disabled by default (because
# in DEBUG mode all frontend requests are transparently proxied to the React
# dev server.)
STATICFILES_DIRS = [os.path.join(FRONTEND_DIR, "build", "static")]

# Whitenoise
# To serve compressed static files, `DEBUG` or `WHITENOISE_USE_FINDERS` must be
# False, and the static files must be available in `STATIC_ROOT` (i.e.,
# by running `collectstatic`)
STATIC_ROOT = os.path.join(BASE_DIR, "static")
STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Files in this directory will be served at the server root.
WHITENOISE_ROOT = os.path.join(FRONTEND_DIR, "root")

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Channels
ASGI_APPLICATION = "app.routing.application"
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {"hosts": [("127.0.0.1", 6379)]},
    }
}

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# DRF
REST_FRAMEWORK = {
    # If the following lines are uncommented, the browser-based default
    # DRF views will not be accessible, and the API endpoints will only
    # produce/expect raw JSON.
    # "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    # "DEFAULT_PARSER_CLASSES": ("rest_framework.parsers.JSONParser",),
}

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Integration with React dev mode
# Host/Port for the React dev server (the upstream default is
# localhost:3000, but this might cause problems for our proxy view since it
# does not seem to answer on the IPv6 localhost address.)
REACT_HOST = os.environ.get("REACT_HOST") or "127.0.0.1"
REACT_PORT = os.environ.get("REACT_PORT") or 3000

# Port that Django is running on, for internal API requests etc.
DJANGO_PORT = os.environ.get("DJANGO_PORT") or 8080

# -'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,.-'~'-.,__,
# Tasks
DRAMATIQ_REDIS_URL = os.getenv("REDIS_URL", "redis://127.0.0.1:6379/0")
DRAMATIQ_BROKER = {
    "BROKER": "dramatiq.brokers.redis.RedisBroker",
    "OPTIONS": {
        "connection_pool": redis.ConnectionPool.from_url(DRAMATIQ_REDIS_URL)
    },
    "MIDDLEWARE": [
        "dramatiq.middleware.AgeLimit",
        "dramatiq.middleware.TimeLimit",
        "dramatiq.middleware.Retries",
        "django_dramatiq.middleware.AdminMiddleware",
        "django_dramatiq.middleware.DbConnectionsMiddleware",
    ],
}
DRAMATIQ_RESULT_BACKEND = {
    "BACKEND": "dramatiq.results.backends.redis.RedisBackend",
    "BACKEND_OPTIONS": {"url": "redis://localhost:6379"},
    "MIDDLEWARE_OPTIONS": {"result_ttl": 60000},
}
